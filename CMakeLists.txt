# set minimum cmake version
cmake_minimum_required(VERSION 3.0)
project(XYAIBridge LANGUAGES C CXX ASM)


# build release lib if not set build type
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE release CACHE STRING "Choose the type of build" FORCE)
endif ()

message(STATUS ">>>>>>>>>>>>>")
message(STATUS "\tSystem: ${CMAKE_SYSTEM_NAME}")
message(STATUS "\tProcessor: ${CMAKE_SYSTEM_PROCESSOR}")

if (NOT (MSVC OR WIN32))
    if (XYBRIDGE_USE_CPP14)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
    else ()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    endif ()
endif ()

if (CMAKE_BUILD_TYPE MATCHES Debug)
    if (MSVC)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /DEBUG")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DEBUG")
    else ()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
    endif ()
else ()
    if (MSVC)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /O2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
    else ()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
    endif ()
endif ()

if (WIN32)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE)
    add_definitions(-DNOMINMAX)
else ()
    add_definitions(-fPIC)
    #add_definitions(-Wall -Wextra -Wno-unused-function)
    add_definitions(-fvisibility=hidden -fvisibility-inlines-hidden)
    if (CMAKE_BUILD_TYPE MATCHES "(Release|RELEASE|release)")
        if (NOT CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
            add_definitions(-Ofast)
        endif ()
        add_definitions(-ffast-math)
    endif ()
endif ()
if (ANDROID AND NOT XYBRIDGE_USE_SNPE AND NOT XYBRIDGE_USE_PTM)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-rtti -fno-exceptions")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -fno-exceptions")
endif ()

if (CMAKE_SYSTEM_NAME MATCHES "^Linux")
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "^arm")
        add_definitions(-mfpu=neon)
    endif ()
    if (CMAKE_SYSTEM_NAME MATCHES "^Android" AND XYBRIDGE_USE_LOGCAT)
        add_definitions(-DXYAI_USE_LOGCAT)
    endif ()
endif ()

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/hello_world)